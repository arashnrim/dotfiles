var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import fs from "fs";
import path from "path";
import { bold, cyan, gray, green, red, yellow } from "kleur/colors";
import fetch from "node-fetch";
import prompts from "prompts";
import degit from "degit";
import yargs from "yargs-parser";
import { FRAMEWORKS, COUNTER_COMPONENTS } from "./frameworks.js";
import { TEMPLATES } from "./templates.js";
import { createConfig } from "./config.js";
const cleanArgv = process.argv.filter((arg) => arg !== "--");
const args = yargs(cleanArgv, { array: ["renderers"] });
prompts.override(args);
function mkdirp(dir) {
  try {
    fs.mkdirSync(dir, { recursive: true });
  } catch (e) {
    if (e.code === "EEXIST")
      return;
    throw e;
  }
}
const { version } = JSON.parse(fs.readFileSync(new URL("../package.json", import.meta.url), "utf-8"));
const POSTPROCESS_FILES = ["package.json", "astro.config.mjs", "CHANGELOG.md"];
async function main() {
  console.log(`
${bold("Welcome to Astro!")} ${gray(`(create-astro v${version})`)}`);
  console.log(`If you encounter a problem, visit ${cyan("https://github.com/withastro/astro/issues")} to search or file a new issue.
`);
  console.log(`${green(`>`)} ${gray(`Prepare for liftoff.`)}`);
  console.log(`${green(`>`)} ${gray(`Gathering mission details...`)}`);
  const cwd = args["_"][2] || ".";
  if (fs.existsSync(cwd)) {
    if (fs.readdirSync(cwd).length > 0) {
      const response = await prompts({
        type: "confirm",
        name: "forceOverwrite",
        message: "Directory not empty. Continue [force overwrite]?",
        initial: false
      });
      if (!response.forceOverwrite) {
        process.exit(1);
      }
      mkdirp(cwd);
    }
  } else {
    mkdirp(cwd);
  }
  const options = await prompts([
    {
      type: "select",
      name: "template",
      message: "Which app template would you like to use?",
      choices: TEMPLATES
    }
  ]);
  if (!options.template) {
    process.exit(1);
  }
  const hash = args.commit ? `#${args.commit}` : "";
  const templateTarget = options.template.includes("/") ? options.template : `withastro/astro/examples/${options.template}#latest`;
  const emitter = degit(`${templateTarget}${hash}`, {
    cache: false,
    force: true,
    verbose: false
  });
  const selectedTemplate = TEMPLATES.find((template) => template.value === options.template);
  let renderers = [];
  if ((selectedTemplate == null ? void 0 : selectedTemplate.renderers) === true) {
    const result = await prompts([
      {
        type: "multiselect",
        name: "renderers",
        message: "Which frameworks would you like to use?",
        choices: FRAMEWORKS
      }
    ]);
    renderers = result.renderers;
  } else if ((selectedTemplate == null ? void 0 : selectedTemplate.renderers) && Array.isArray(selectedTemplate.renderers) && selectedTemplate.renderers.length) {
    renderers = selectedTemplate.renderers;
    const titles = renderers.map((renderer) => {
      var _a;
      return (_a = FRAMEWORKS.find((item) => item.value === renderer)) == null ? void 0 : _a.title;
    }).join(", ");
    console.log(`${green(`\u2714`)} ${bold(`Using template's default renderers`)} ${gray("\u203A")} ${titles}`);
  }
  try {
    console.log(`${green(`>`)} ${gray(`Copying project files...`)}`);
    await emitter.clone(cwd);
  } catch (err) {
    console.error(red(err.message));
    if (err.message === "zlib: unexpected end of file") {
      console.log(yellow("This seems to be a cache related problem. Remove the folder '~/.degit/github/snowpackjs' to fix this error."));
      console.log(yellow("For more information check out this issue: https://github.com/withastro/astro/issues/655"));
    }
    if (err.code === "MISSING_REF") {
      console.log(yellow("This seems to be an issue with degit. Please check if you have 'git' installed on your system, and install it if you don't have (https://git-scm.com)."));
      console.log(yellow("If you do have 'git' installed, please file a new issue here: https://github.com/withastro/astro/issues"));
    }
    process.exit(1);
  }
  await Promise.all(POSTPROCESS_FILES.map(async (file) => {
    var _a;
    const fileLoc = path.resolve(path.join(cwd, file));
    switch (file) {
      case "CHANGELOG.md": {
        if (fs.existsSync(fileLoc)) {
          await fs.promises.unlink(fileLoc);
        }
        break;
      }
      case "astro.config.mjs": {
        if ((selectedTemplate == null ? void 0 : selectedTemplate.renderers) !== true) {
          break;
        }
        await fs.promises.writeFile(fileLoc, createConfig({ renderers }));
        break;
      }
      case "package.json": {
        const packageJSON = JSON.parse(await fs.promises.readFile(fileLoc, "utf8"));
        delete packageJSON.snowpack;
        const rendererEntries = await Promise.all(["astro", ...renderers].map((renderer) => fetch(`https://registry.npmjs.org/${renderer}/latest`).then((res) => res.json()).then((res) => [renderer, `^${res["version"]}`])));
        packageJSON.devDependencies = __spreadValues(__spreadValues({}, (_a = packageJSON.devDependencies) != null ? _a : {}), Object.fromEntries(rendererEntries));
        await fs.promises.writeFile(fileLoc, JSON.stringify(packageJSON, void 0, 2));
        break;
      }
    }
  }));
  if ((selectedTemplate == null ? void 0 : selectedTemplate.value) === "starter") {
    let importStatements = [];
    let components = [];
    await Promise.all(renderers.map(async (renderer) => {
      const component = COUNTER_COMPONENTS[renderer];
      const componentName = path.basename(component.filename, path.extname(component.filename));
      const absFileLoc = path.resolve(cwd, component.filename);
      importStatements.push(`import ${componentName} from '${component.filename.replace(/^src/, "..")}';`);
      components.push(`<${componentName} client:visible />`);
      await fs.promises.writeFile(absFileLoc, component.content);
    }));
    const pageFileLoc = path.resolve(path.join(cwd, "src", "pages", "index.astro"));
    const content = (await fs.promises.readFile(pageFileLoc)).toString();
    const newContent = content.replace(/^(\s*)\/\* ASTRO\:COMPONENT_IMPORTS \*\//gm, (_, indent) => {
      return indent + importStatements.join("\n");
    }).replace(/^(\s*)<!-- ASTRO:COMPONENT_MARKUP -->/gm, (_, indent) => {
      return components.map((ln) => indent + ln).join("\n");
    });
    await fs.promises.writeFile(pageFileLoc, newContent);
  }
  console.log(bold(green("\u2714") + " Done!"));
  console.log("\nNext steps:");
  let i = 1;
  const relative = path.relative(process.cwd(), cwd);
  if (relative !== "") {
    console.log(`  ${i++}: ${bold(cyan(`cd ${relative}`))}`);
  }
  console.log(`  ${i++}: ${bold(cyan("npm install"))} (or pnpm install, yarn, etc)`);
  console.log(`  ${i++}: ${bold(cyan('git init && git add -A && git commit -m "Initial commit"'))} (optional step)`);
  console.log(`  ${i++}: ${bold(cyan("npm run dev"))} (or pnpm, yarn, etc)`);
  console.log(`
To close the dev server, hit ${bold(cyan("Ctrl-C"))}`);
  console.log(`
Stuck? Visit us at ${cyan("https://astro.build/chat")}
`);
}
export {
  main,
  mkdirp
};
//# sourceMappingURL=data:application/json;base64,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
